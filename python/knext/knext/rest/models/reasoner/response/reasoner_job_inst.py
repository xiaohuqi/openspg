# coding: utf-8
# Copyright 2023 Ant Group CO., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied.


"""
    knext

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from knext.rest.configuration import Configuration


class ReasonerJobInst(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "job_id": "int",
        "project_id": "int",
        "start_time": "str",
        "end_time": "str",
        "log_info": "str",
        "progress": "object",
        "result": "BaseReasonerResult",
        "job_inst_id": "int",
        "status": "str",
        "external_job_inst_id": "str",
    }

    attribute_map = {
        "job_id": "jobId",
        "project_id": "projectId",
        "start_time": "startTime",
        "end_time": "endTime",
        "log_info": "logInfo",
        "progress": "progress",
        "result": "result",
        "job_inst_id": "jobInstId",
        "status": "status",
        "external_job_inst_id": "externalJobInstId",
    }

    def __init__(
        self,
        job_id=None,
        project_id=None,
        start_time=None,
        end_time=None,
        log_info=None,
        progress=None,
        result=None,
        job_inst_id=None,
        status=None,
        external_job_inst_id=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """ReasonerJobInst - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._job_id = None
        self._project_id = None
        self._start_time = None
        self._end_time = None
        self._log_info = None
        self._progress = None
        self._result = None
        self._job_inst_id = None
        self._status = None
        self._external_job_inst_id = None
        self.discriminator = None

        if job_id is not None:
            self.job_id = job_id
        if project_id is not None:
            self.project_id = project_id
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if log_info is not None:
            self.log_info = log_info
        if progress is not None:
            self.progress = progress
        if result is not None:
            self.result = result
        if job_inst_id is not None:
            self.job_inst_id = job_inst_id
        if status is not None:
            self.status = status
        if external_job_inst_id is not None:
            self.external_job_inst_id = external_job_inst_id

    @property
    def job_id(self):
        """Gets the job_id of this ReasonerJobInst.  # noqa: E501


        :return: The job_id of this ReasonerJobInst.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this ReasonerJobInst.


        :param job_id: The job_id of this ReasonerJobInst.  # noqa: E501
        :type: int
        """

        self._job_id = job_id

    @property
    def project_id(self):
        """Gets the project_id of this ReasonerJobInst.  # noqa: E501


        :return: The project_id of this ReasonerJobInst.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ReasonerJobInst.


        :param project_id: The project_id of this ReasonerJobInst.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def start_time(self):
        """Gets the start_time of this ReasonerJobInst.  # noqa: E501


        :return: The start_time of this ReasonerJobInst.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ReasonerJobInst.


        :param start_time: The start_time of this ReasonerJobInst.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ReasonerJobInst.  # noqa: E501


        :return: The end_time of this ReasonerJobInst.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ReasonerJobInst.


        :param end_time: The end_time of this ReasonerJobInst.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def log_info(self):
        """Gets the log_info of this ReasonerJobInst.  # noqa: E501


        :return: The log_info of this ReasonerJobInst.  # noqa: E501
        :rtype: str
        """
        return self._log_info

    @log_info.setter
    def log_info(self, log_info):
        """Sets the log_info of this ReasonerJobInst.


        :param log_info: The log_info of this ReasonerJobInst.  # noqa: E501
        :type: str
        """

        self._log_info = log_info

    @property
    def progress(self):
        """Gets the progress of this ReasonerJobInst.  # noqa: E501


        :return: The progress of this ReasonerJobInst.  # noqa: E501
        :rtype: object
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this ReasonerJobInst.


        :param progress: The progress of this ReasonerJobInst.  # noqa: E501
        :type: object
        """

        self._progress = progress

    @property
    def result(self):
        """Gets the result of this ReasonerJobInst.  # noqa: E501


        :return: The result of this ReasonerJobInst.  # noqa: E501
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ReasonerJobInst.


        :param result: The result of this ReasonerJobInst.  # noqa: E501
        :type: object
        """

        self._result = result

    @property
    def job_inst_id(self):
        """Gets the job_inst_id of this ReasonerJobInst.  # noqa: E501


        :return: The job_inst_id of this ReasonerJobInst.  # noqa: E501
        :rtype: int
        """
        return self._job_inst_id

    @job_inst_id.setter
    def job_inst_id(self, job_inst_id):
        """Sets the job_inst_id of this ReasonerJobInst.


        :param job_inst_id: The job_inst_id of this ReasonerJobInst.  # noqa: E501
        :type: int
        """

        self._job_inst_id = job_inst_id

    @property
    def status(self):
        """Gets the status of this ReasonerJobInst.  # noqa: E501


        :return: The status of this ReasonerJobInst.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReasonerJobInst.


        :param status: The status of this ReasonerJobInst.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "INIT",
            "QUEUE",
            "RUNNING",
            "CANCEL",
            "FAILURE",
            "SUCCESS",
        ]  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and status not in allowed_values
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
                    status, allowed_values
                )
            )

        self._status = status

    @property
    def external_job_inst_id(self):
        """Gets the external_job_inst_id of this ReasonerJobInst.  # noqa: E501


        :return: The external_job_inst_id of this ReasonerJobInst.  # noqa: E501
        :rtype: str
        """
        return self._external_job_inst_id

    @external_job_inst_id.setter
    def external_job_inst_id(self, external_job_inst_id):
        """Sets the external_job_inst_id of this ReasonerJobInst.


        :param external_job_inst_id: The external_job_inst_id of this ReasonerJobInst.  # noqa: E501
        :type: str
        """

        self._external_job_inst_id = external_job_inst_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReasonerJobInst):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReasonerJobInst):
            return True

        return self.to_dict() != other.to_dict()
